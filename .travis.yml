services:
  - docker
language: rust
rust:
- stable
cache: cargo

# All Rust build architectures are defined here
matrix:
  include:
  - env: TARGET=x86_64-unknown-linux-gnu
    os: linux
  - env: TARGET=i686-apple-darwin
    os: osx
    osx_image: xcode10
  - env: TARGET=x86_64-apple-darwin
    os: osx
    osx_image: xcode10
  - env: TARGET=x86_64-pc-windows-msvc
    os: windows
  - env: TARGET=armv7-unknown-linux-gnueabihf
    os: linux
    addons:
      apt:
        packages:
        - gcc-arm-linux-gnueabihf
install:
  - export PATH="$PATH:$HOME/.cargo/bin"
  - rustup target add $TARGET || true
    
# This is the script that will be run on each matrix element
script:
  - |
    if [ $TARGET = "x86_64-unknown-linux-gnu" ]; then
      echo "Running on $TARGET, so running tests!"
      cargo test
    fi
  - |
    if [ $TARGET = "x86_64-pc-windows-msvc" ]; then
      cargo build --target $TARGET --verbose --release
    elif [ $TARGET = "i686-apple-darwin" ]; then
      cargo build --target $TARGET --verbose --release
    elif [ $TARGET = "x86_64-apple-darwin" ]; then
      cargo build --target $TARGET --verbose --release
    else
      cross build --target $TARGET --verbose --release
    fi
  - mkdir -p target/executable
  - cp target/${TARGET}/release/rrss2imap target/executable/rrss2imap-${TARGET}
  - ls -la target/executable

# Once the Rust packages are built, here they are deployed
deploy:
  provider: releases
  api_key: ${GITHUB_OAUTH}
  file_glob: true
  file: target/executable/*
  skip_cleanup: true
  overwrite: true
  # This way, the release is not directly visible
  draft: true
  # Release name on body
  name: "$TRAVIS_TAG"
  # Body is created by git journal !
#  body: "$JOURNAL"
  on:
    repo: Riduidel/rrss2imap
    tags: true

branches:
  except:
  - "/^untagged/"
